{"version":3,"file":"index.js","names":["_rxjs","require","_index","_index2","_index3","_rxError","_replicationHelper","_rxDatabaseInternalStore","_plugin","_rxStorageHelper","_overwritable","_hooks","REPLICATION_STATE_BY_COLLECTION","exports","WeakMap","RxReplicationState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","subs","subjects","received","Subject","sent","error","canceled","BehaviorSubject","active","received$","asObservable","sent$","error$","canceled$","active$","onCancel","callOnStart","undefined","remoteEvents$","replicationStates","getFromMapOrCreate","onDestroy","cancel","Object","keys","forEach","key","defineProperty","get","startPromise","Promise","res","_proto","prototype","start","isStopped","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","database","metaInstanceCollectionName","hashFunction","name","join","metaInstanceSchema","getRxReplicationMetaInstanceSchema","schema","jsonSchema","hasEncryption","metaInstance","all","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","multiInstance","options","password","devMode","overwritable","isDevMode","addConnectedStorageToCollection","internalReplicationState","replicateRxStorageInstance","pushBatchSize","batchSize","pullBatchSize","initialCheckpoint","upstream","downstream","forkInstance","storageInstance","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","filter","_v","mergeMap","ev","useEv","flatClone","documents","handlePulledDocuments","map","d","masterChangesSince","checkpoint","done","result","handler","err","emitError","newRxError","errors","toArray","er","errorToPlainJson","direction","next","awaitRetry","ensureNotFalsy","useResult","masterWrite","rows","runAsyncPluginHooks","useRowsOrNull","row","newDocumentState","assumedMasterState","swapDefaultDeletedTodeletedField","useRows","arrayFilterNotEmpty","length","Array","isArray","pushRows","args","rxdb","conflicts","events","subscribe","processed","down","document","up","writeToMasterRow","combineLatest","isActive","stream$","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","getValue","awaitInitialReplication","awaitInSync","t","requestIdlePromise","reSync","emitEvent","PROMISE_RESOLVE_FALSE","promises","fn","toPromise","cancelRxStorageReplication","checkpointQueue","then","close","sub","unsubscribe","complete","replicateRxCollection","waitForLeadership","addRxPlugin","RxDBLeaderElectionPlugin","replicationState","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun","PROMISE_RESOLVE_TRUE"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\n * This plugin contains the primitives to create\n * a RxDB client-server replication.\n * It is used in the other replication plugins\n * but also can be used as standalone with a custom replication handler.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    mergeMap,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxError,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    RxTypeError,\n    WithDeleted\n} from '../../types/index.d.ts';\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport {\n    arrayFilterNotEmpty,\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    getFromMapOrCreate,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    toArray,\n    toPromise\n} from '../../plugins/utils/index.ts';\nimport {\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    cancelRxStorageReplication,\n    getRxReplicationMetaInstanceSchema,\n    replicateRxStorageInstance\n} from '../../replication-protocol/index.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport {\n    awaitRetry,\n    DEFAULT_MODIFIER,\n    swapDefaultDeletedTodeletedField,\n    handlePulledDocuments\n} from './replication-helper.ts';\nimport {\n    addConnectedStorageToCollection\n} from '../../rx-database-internal-store.ts';\nimport { addRxPlugin } from '../../plugin.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport { overwritable } from '../../overwritable.ts';\nimport {\n    runAsyncPluginHooks\n} from '../../hooks.ts';\n\n\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\n\nexport class RxReplicationState<RxDocType, CheckpointType> {\n    public readonly subs: Subscription[] = [];\n    public readonly subjects = {\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\n        sent: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\n        active: new BehaviorSubject<boolean>(false) // true when something is running, false when not\n    };\n\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\n    readonly sent$: Observable<WithDeleted<RxDocType>> = this.subjects.sent.asObservable();\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\n\n    public startPromise: Promise<void>;\n\n    public onCancel: (() => void)[] = [];\n\n    constructor(\n        /**\n         * The identifier, used to flag revisions\n         * and to identify which documents state came from the remote.\n         */\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n    ) {\n        const replicationStates = getFromMapOrCreate(\n            REPLICATION_STATE_BY_COLLECTION,\n            collection,\n            () => []\n        );\n        replicationStates.push(this);\n\n        // stop the replication when the collection gets destroyed\n        this.collection.onDestroy.push(() => this.cancel());\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n        const startPromise = new Promise<void>(res => {\n            this.callOnStart = res;\n        });\n        this.startPromise = startPromise;\n    }\n\n    private callOnStart: () => void = undefined as any;\n\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>, any, {}, any>;\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    public async start(): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        // fill in defaults for pull & push\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\n\n        const database = this.collection.database;\n        const metaInstanceCollectionName = 'rx-replication-meta-' + await database.hashFunction([\n            this.collection.name,\n            this.replicationIdentifier\n        ].join('-'));\n        const metaInstanceSchema = getRxReplicationMetaInstanceSchema(\n            this.collection.schema.jsonSchema,\n            hasEncryption(this.collection.schema.jsonSchema)\n        );\n\n        const [metaInstance] = await Promise.all([\n            this.collection.database.storage.createStorageInstance<RxStorageReplicationMeta<RxDocType, CheckpointType>>({\n                databaseName: database.name,\n                collectionName: metaInstanceCollectionName,\n                databaseInstanceToken: database.token,\n                multiInstance: database.multiInstance, // TODO is this always false?\n                options: {},\n                schema: metaInstanceSchema,\n                password: database.password,\n                devMode: overwritable.isDevMode()\n            }),\n            addConnectedStorageToCollection(\n                this.collection,\n                metaInstanceCollectionName,\n                metaInstanceSchema\n            )\n        ]);\n        this.metaInstance = metaInstance;\n\n        this.internalReplicationState = replicateRxStorageInstance({\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\n            initialCheckpoint: {\n                upstream: this.push ? this.push.initialCheckpoint : undefined,\n                downstream: this.pull ? this.pull.initialCheckpoint : undefined\n            },\n            forkInstance: this.collection.storageInstance,\n            metaInstance: this.metaInstance,\n            hashFunction: database.hashFunction,\n            identifier: 'rxdbreplication' + this.replicationIdentifier,\n            conflictHandler: this.collection.conflictHandler,\n            replicationHandler: {\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\n                    filter(_v => !!this.pull),\n                    mergeMap(async (ev) => {\n                        if (ev === 'RESYNC') {\n                            return ev;\n                        }\n                        const useEv = flatClone(ev);\n                        useEv.documents = handlePulledDocuments(this.collection, this.deletedField, useEv.documents);\n                        useEv.documents = await Promise.all(\n                            useEv.documents.map(d => pullModifier(d))\n                        );\n                        return useEv;\n                    })\n                ),\n                masterChangesSince: async (\n                    checkpoint: CheckpointType | undefined,\n                    batchSize: number\n                ) => {\n                    if (!this.pull) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n                    /**\n                     * Retries must be done here in the replication primitives plugin,\n                     * because the replication protocol itself has no\n                     * error handling.\n                     */\n                    let done = false;\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\n                    while (!done && !this.isStopped()) {\n                        try {\n                            result = await this.pull.handler(\n                                checkpoint,\n                                batchSize\n                            );\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PULL', {\n                                checkpoint,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'pull'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n                    if (this.isStopped()) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n\n                    const useResult = flatClone(result);\n                    useResult.documents = handlePulledDocuments(this.collection, this.deletedField, useResult.documents);\n                    useResult.documents = await Promise.all(\n                        useResult.documents.map(d => pullModifier(d))\n                    );\n                    return useResult;\n                },\n                masterWrite: async (\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\n                ) => {\n                    if (!this.push) {\n                        return [];\n                    }\n                    let done = false;\n\n                    await runAsyncPluginHooks('preReplicationMasterWrite', {\n                        rows,\n                        collection: this.collection\n                    });\n\n                    const useRowsOrNull = await Promise.all(\n                        rows.map(async (row) => {\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\n                            if (row.newDocumentState === null) {\n                                return null;\n                            }\n                            if (row.assumedMasterState) {\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\n                            }\n                            if (this.deletedField !== '_deleted') {\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\n                                if (row.assumedMasterState) {\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\n                                }\n                            }\n                            return row;\n                        })\n                    );\n                    const useRows: RxReplicationWriteToMasterRow<RxDocType>[] = useRowsOrNull.filter(arrayFilterNotEmpty);\n\n                    let result: WithDeleted<RxDocType>[] = null as any;\n\n                    // In case all the rows have been filtered and nothing has to be sent\n                    if (useRows.length === 0) {\n                        done = true;\n                        result = [];\n                    }\n\n                    while (!done && !this.isStopped()) {\n                        try {\n                            result = await this.push.handler(useRows);\n                            /**\n                             * It is a common problem that people have wrongly behaving backend\n                             * that do not return an array with the conflicts on push requests.\n                             * So we run this check here to make it easier to debug.\n                             * @link https://github.com/pubkey/rxdb/issues/4103\n                             */\n                            if (!Array.isArray(result)) {\n                                throw newRxError(\n                                    'RC_PUSH_NO_AR',\n                                    {\n                                        pushRows: rows,\n                                        direction: 'push',\n                                        args: { result }\n                                    }\n                                );\n                            }\n                            done = true;\n                        } catch (err: any | Error | Error[] | RxError) {\n                            const emitError = (err as RxError).rxdb ? err : newRxError('RC_PUSH', {\n                                pushRows: rows,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'push'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n                    if (this.isStopped()) {\n                        return [];\n                    }\n\n                    await runAsyncPluginHooks('preReplicationMasterWriteDocumentsHandle', {\n                        result,\n                        collection: this.collection\n                    });\n\n                    const conflicts = handlePulledDocuments(this.collection, this.deletedField, ensureNotFalsy(result));\n                    return conflicts;\n                }\n            }\n        });\n        this.subs.push(\n            this.internalReplicationState.events.error.subscribe(err => {\n                this.subjects.error.next(err);\n            }),\n            this.internalReplicationState.events.processed.down\n                .subscribe(row => this.subjects.received.next(row.document as any)),\n            this.internalReplicationState.events.processed.up\n                .subscribe(writeToMasterRow => {\n                    this.subjects.sent.next(writeToMasterRow.newDocumentState);\n                }),\n            combineLatest([\n                this.internalReplicationState.events.active.down,\n                this.internalReplicationState.events.active.up\n            ]).subscribe(([down, up]) => {\n                const isActive = down || up;\n                this.subjects.active.next(isActive);\n            })\n        );\n\n        if (\n            this.pull &&\n            this.pull.stream$ &&\n            this.live\n        ) {\n            this.subs.push(\n                this.pull.stream$.subscribe({\n                    next: ev => {\n                        this.remoteEvents$.next(ev);\n                    },\n                    error: err => {\n                        this.subjects.error.next(err);\n                    }\n                })\n            );\n        }\n\n        /**\n         * Non-live replications run once\n         * and then automatically get canceled.\n         */\n        if (!this.live) {\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\n            await awaitRxStorageReplicationInSync(this.internalReplicationState);\n            await this.cancel();\n        }\n        this.callOnStart();\n    }\n\n    isStopped(): boolean {\n        if (this.subjects.canceled.getValue()) {\n            return true;\n        }\n        return false;\n    }\n\n    async awaitInitialReplication(): Promise<void> {\n        await this.startPromise;\n        return awaitRxStorageReplicationFirstInSync(\n            ensureNotFalsy(this.internalReplicationState)\n        );\n    }\n\n    /**\n     * Returns a promise that resolves when:\n     * - All local data is replicated with the remote\n     * - No replication cycle is running or in retry-state\n     *\n     * WARNING: USing this function directly in a multi-tab browser application\n     * is dangerous because only the leading instance will ever be replicated,\n     * so this promise will not resolve in the other tabs.\n     * For multi-tab support you should set and observe a flag in a local document.\n     */\n    async awaitInSync(): Promise<true> {\n        await this.startPromise;\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\n\n        /**\n         * To reduce the amount of re-renders and make testing\n         * and to make the whole behavior more predictable,\n         * we await these things multiple times.\n         * For example the state might be in sync already and at the\n         * exact same time a pull.stream$ event comes in and we want to catch\n         * that in the same call to awaitInSync() instead of resolving\n         * while actually the state is not in sync.\n         */\n        let t = 2;\n        while (t > 0) {\n            t--;\n\n            /**\n             * Often awaitInSync() is called directly after a document write,\n             * like in the unit tests.\n             * So we first have to await the idleness to ensure that all RxChangeEvents\n             * are processed already.\n             */\n            await this.collection.database.requestIdlePromise();\n            await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\n        }\n\n        return true;\n    }\n\n    reSync() {\n        this.remoteEvents$.next('RESYNC');\n    }\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\n        this.remoteEvents$.next(ev);\n    }\n\n    async cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const promises: Promise<any>[] = this.onCancel.map(fn => toPromise(fn()));\n\n        if (this.internalReplicationState) {\n            await cancelRxStorageReplication(this.internalReplicationState);\n        }\n        if (this.metaInstance) {\n            promises.push(\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\n            );\n        }\n\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n\n        this.subjects.active.complete();\n        this.subjects.canceled.complete();\n        this.subjects.error.complete();\n        this.subjects.received.complete();\n        this.subjects.sent.complete();\n\n        return Promise.all(promises);\n    }\n}\n\n\nexport function replicateRxCollection<RxDocType, CheckpointType>(\n    {\n        replicationIdentifier,\n        collection,\n        deletedField = '_deleted',\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5,\n        waitForLeadership = true,\n        autoStart = true,\n    }: ReplicationOptions<RxDocType, CheckpointType>\n): RxReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    /**\n     * It is a common error to forget to add these config\n     * objects. So we check here because it makes no sense\n     * to start a replication with neither push nor pull.\n     */\n    if (!pull && !push) {\n        throw newRxError('UT3', {\n            collection: collection.name,\n            args: {\n                replicationIdentifier\n            }\n        });\n    }\n\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\n        replicationIdentifier,\n        collection,\n        deletedField,\n        pull,\n        push,\n        live,\n        retryTime,\n        autoStart\n    );\n\n\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\n    return replicationState as any;\n}\n\n\nexport function startReplicationOnLeaderShip(\n    waitForLeadership: boolean,\n    replicationState: RxReplicationState<any, any>\n) {\n    /**\n     * Always await this Promise to ensure that the current instance\n     * is leader when waitForLeadership=true\n     */\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    return waitTillRun.then(() => {\n        if (replicationState.isStopped()) {\n            return;\n        }\n        if (replicationState.autoStart) {\n            replicationState.start();\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]}